üîß ¬øQu√© es CreatePipe?

CreatePipe es una API de Windows que crea un pipe an√≥nimo para la comunicaci√≥n entre procesos. Es parte del API de la familia Windows y se declara as√≠:

BOOL CreatePipe(
  PHANDLE               hReadPipe,
  PHANDLE               hWritePipe,
  LPSECURITY_ATTRIBUTES lpPipeAttributes,
  DWORD                 nSize
);

üì¶ ¬øQu√© hace exactamente?

    Crea dos manejadores:

        Uno para lectura (hReadPipe)

        Otro para escritura (hWritePipe)

    Lo que escribes en uno puede ser le√≠do por el otro.

    Es com√∫n usarlo para redirigir la salida o entrada est√°ndar de un proceso hijo.

üß† ¬øC√≥mo lo usan los malwares?

El uso de CreatePipe en malware suele estar relacionado con:

    Ejecuci√≥n de comandos con redirecci√≥n

        El malware crea un pipe.

        Lanza un proceso como cmd.exe o powershell.exe.

        Redirige su salida para capturarla (mediante ReadFile en el manejador de lectura).

    Exfiltraci√≥n de datos

        Se captura la salida de un comando del sistema (como ipconfig, netstat, etc.)

        Luego, el contenido del pipe se env√≠a por red (send()), o se escribe en disco.

    Comportamiento sigiloso

        Se evita mostrar ventanas visibles o resultados al usuario.

        Todo se maneja por pipes en segundo plano.


        üîç Ejemplo de uso t√≠pico en malware

HANDLE hRead, hWrite;
SECURITY_ATTRIBUTES sa = { sizeof(sa), NULL, TRUE }; // Inheritable handles

CreatePipe(&hRead, &hWrite, &sa, 0);

STARTUPINFO si = { sizeof(si) };
si.dwFlags = STARTF_USESTDHANDLES;
si.hStdOutput = hWrite;
si.hStdError  = hWrite;

CreateProcess(NULL, "cmd.exe /c whoami", ... , &si, ...);

// Luego el malware hace ReadFile(hRead, ...) y obtiene "nombre_usuario"


-------------------------------

[0x00401cda]> ii~CreatePipe
7   0x00402018 NONE FUNC KERNEL32.dll CreatePipe
[0x00401cda]> axt @ 0x00402018
fcn.00401600 0x40161d [ICOD:r--] mov ebx, dword [sym.imp.KERNEL32.dll_CreatePipe]
[0x00401cda]> s 0x40161d
[0x0040161d]> pd 20
‚îÇ           0x0040161d      8b1d18204000   mov ebx, dword [sym.imp.KERNEL32.dll_CreatePipe] ; [0x402018:4]=0x233e reloc.KERNEL32.dll_CreatePipe ; ">#"
‚îÇ           0x00401623      83c404         add esp, 4
‚îÇ           0x00401626      8bf0           mov esi, eax
‚îÇ           0x00401628      8d442414       lea eax, [var_14h_2]
‚îÇ           0x0040162c      6a00           push 0
‚îÇ           0x0040162e      8d4c2414       lea ecx, [var_14h]
‚îÇ           0x00401632      8d7e04         lea edi, [esi + 4]
‚îÇ           0x00401635      50             push eax
‚îÇ           0x00401636      51             push ecx
‚îÇ           0x00401637      c70600000000   mov dword [esi], 0
‚îÇ           0x0040163d      c70700000000   mov dword [edi], 0
‚îÇ           0x00401643      56             push esi
‚îÇ           0x00401644      c74424240c..   mov dword [var_14h_2], 0xc  ; [0xc:4]=-1 ; 12
‚îÇ           0x0040164c      c744242800..   mov dword [var_28h], 0
‚îÇ           0x00401654      c744242c01..   mov dword [var_2ch], 1
‚îÇ           0x0040165c      ffd3           call ebx
‚îÇ           0x0040165e      85c0           test eax, eax
‚îÇ       ‚îå‚îÄ< 0x00401660      7413           je 0x401675
‚îÇ       ‚îÇ   0x00401662      8d542414       lea edx, [var_14h_3]
‚îÇ       ‚îÇ   0x00401666      6a00           push 0
[0x0040161d]>




üîç An√°lisis del flujo en tu binario (a partir de 0x0040161d)
Paso a paso:

    Carga de direcci√≥n de CreatePipe:

mov ebx, dword [sym.imp.KERNEL32.dll_CreatePipe]

Guarda en ebx la direcci√≥n de la funci√≥n CreatePipe.

Configuraci√≥n de variables para los handles:

lea eax, [var_14h_2] ; puntero al HANDLE de lectura
lea ecx, [var_14h]   ; puntero al HANDLE de escritura

Reserva de espacio para los dos handles:

lea edi, [esi + 4]
mov dword [esi], 0
mov dword [edi], 0

Est√°n reservando espacio en esi para los dos handles (read y write).

Push de par√°metros en orden inverso (stack):

push eax    ; PHANDLE de lectura
push ecx    ; PHANDLE de escritura
push esi    ; LPSECURITY_ATTRIBUTES (aparentemente nulo o personalizado)

Inicializaci√≥n de atributos de seguridad (probablemente no usados):

mov dword [var_14h_2], 0xc
mov dword [var_28h], 0
mov dword [var_2ch], 1

Estos valores podr√≠an formar parte de una estructura de atributos, pero parece que realmente no se usan (el tercer argumento es NULL).

Llamada real:

call ebx ; llamada a CreatePipe

Comprobaci√≥n del resultado:

    test eax, eax
    je 0x401675

    Si CreatePipe falla (retorna 0), salta a una rutina de error o cleanup.

üß† ¬øQu√© indica esto en tu malware?

    Prop√≥sito probable: est√° creando un canal interno de comunicaci√≥n.

    Comportamientos comunes en malware:

        Redirigir la entrada/salida de un proceso hijo (por ejemplo, cmd.exe) a trav√©s de pipes.

        Capturar la salida de comandos.

        Encapsular informaci√≥n para enviarla luego por red (como vimos con send()).

üìå Resumen

Este bloque de c√≥digo est√° preparando un pipe an√≥nimo para:

    Leer y escribir datos internamente.

    Posiblemente interactuar con procesos hijos (ej. shell).

    Preparar una comunicaci√≥n encubierta entre componentes del malware.

