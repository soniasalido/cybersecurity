





____________________________________________________________
[0x0040161d]> ii~ReadFile
16  0x0040203c NONE FUNC KERNEL32.dll ReadFile
[0x0040161d]> axt @ 0x0040203c
(nofunc) 0x40198c [ICOD:r--] mov esi, dword [sym.imp.KERNEL32.dll_ReadFile]
[0x0040161d]> s 0x40198c
[0x0040198c]> pd 20
            0x0040198c      8b353c204000   mov esi, dword [sym.imp.KERNEL32.dll_ReadFile] ; [0x40203c:4]=0x23ea reloc.KERNEL32.dll_ReadFile
            ; CODE XREF from fcn.00401860 @ +0x1ee(x)
            0x00401992      8b44240c       mov eax, dword [esp + 0xc]
            0x00401996      85c0           test eax, eax
        ‚îå‚îÄ< 0x00401998      0f868d000000   jbe 0x401a2b
        ‚îÇ   0x0040199e      8b5500         mov edx, dword [ebp]
        ‚îÇ   0x004019a1      8d44240c       lea eax, [esp + 0xc]
        ‚îÇ   0x004019a5      6a00           push 0
        ‚îÇ   0x004019a7      50             push eax
        ‚îÇ   0x004019a8      8d4c2428       lea ecx, [esp + 0x28]
        ‚îÇ   0x004019ac      6800040000     push 0x400                  ; 1024
        ‚îÇ   0x004019b1      51             push ecx
        ‚îÇ   0x004019b2      52             push edx
        ‚îÇ   0x004019b3      ffd6           call esi
        ‚îÇ   0x004019b5      8b44240c       mov eax, dword [esp + 0xc]
        ‚îÇ   0x004019b9      6814304000     push 0x403014               ; '\x140@'
        ‚îÇ   0x004019be      c644042400     mov byte [esp + eax + 0x24], 0
        ‚îÇ   0x004019c3      40             inc eax
        ‚îÇ   0x004019c4      89442410       mov dword [esp + 0x10], eax
        ‚îÇ   0x004019c8      8d442418       lea eax, [esp + 0x18]
        ‚îÇ   0x004019cc      50             push eax
[0x0040198c]>




üìçResumen de ReadFile

La API de Windows ReadFile tiene la siguiente firma:

BOOL ReadFile(
  HANDLE       hFile,
  LPVOID       lpBuffer,
  DWORD        nNumberOfBytesToRead,
  LPDWORD      lpNumberOfBytesRead,
  LPOVERLAPPED lpOverlapped
);

üîç An√°lisis del C√≥digo Ensamblador

0x0040198c      8b353c204000   mov esi, dword [0x40203c] ; direcci√≥n de ReadFile

‚Üí Guarda la direcci√≥n de ReadFile (API de Windows) en esi.

0x00401992      8b44240c       mov eax, dword [esp + 0xc]
0x00401996      85c0           test eax, eax
0x00401998      0f868d000000   jbe 0x401a2b

‚Üí Carga en eax un par√°metro de la pila (probablemente tama√±o o puntero) y salta si eax <= 0 a 0x401a2b.
üîΩ Preparaci√≥n de par√°metros para ReadFile (en orden inverso de la llamada est√°ndar)

0x0040199e      8b5500         mov edx, dword [ebp]        ; HANDLE hFile
0x004019a1      8d44240c       lea eax, [esp + 0xc]         ; LPDWORD lpNumberOfBytesRead
0x004019a5      6a00           push 0                       ; LPOVERLAPPED lpOverlapped = NULL
0x004019a7      50             push eax                     ; LPDWORD lpNumberOfBytesRead
0x004019a8      8d4c2428       lea ecx, [esp + 0x28]        ; LPVOID lpBuffer
0x004019ac      6800040000     push 0x400                   ; DWORD nNumberOfBytesToRead = 1024
0x004019b1      51             push ecx                     ; LPVOID lpBuffer
0x004019b2      52             push edx                     ; HANDLE hFile
0x004019b3      ffd6           call esi                     ; llama a ReadFile

Aqu√≠ est√° la llamada real:

ReadFile(
  hFile = edx,
  lpBuffer = ecx (esp + 0x28),
  nNumberOfBytesToRead = 0x400 (1024 bytes),
  lpNumberOfBytesRead = [esp + 0xc],
  lpOverlapped = NULL
);

üîÅ Posprocesamiento

0x004019b5      8b44240c       mov eax, dword [esp + 0xc]   ; eax = bytes le√≠dos
0x004019b9      6814304000     push 0x403014                ; direcci√≥n base para buffer
0x004019be      c644042400     mov byte [esp + eax + 0x24], 0 ; null-terminate
0x004019c3      40             inc eax
0x004019c4      89442410       mov dword [esp + 0x10], eax
0x004019c8      8d442418       lea eax, [esp + 0x18]
0x004019cc      50             push eax

Estas instrucciones probablemente est√°n preparando el contenido le√≠do (de hasta 1024 bytes) para su posterior uso o an√°lisis, incluyendo un null-terminator (para usarlo como string C).
‚úÖ Conclusi√≥n

Este bloque de c√≥digo:

    Llama a ReadFile para leer 1024 bytes desde un archivo en hFile a un buffer.

    Guarda los bytes le√≠dos en una variable temporal ([esp+0xc]).

    Asegura que el buffer tenga null-terminator, probablemente para tratarlo como un string.

    Prepara informaci√≥n adicional en la pila, posiblemente para otro procesamiento o funci√≥n.

----------------------------------------






[0x004019b3]> s 0x00401860
[0x00401860]> pd
            ; CALL XREF from fcn.00401600 @ 0x4016bf(x)
‚îå 219: fcn.00401860 (int32_t arg_64h, int32_t arg_70h);
‚îÇ `- args(sp[0x4..0x8]) vars(20:sp[0x4..0x98])
‚îÇ           0x00401860      83ec60         sub esp, 0x60
‚îÇ           0x00401863      8b442464       mov eax, dword [arg_64h]
‚îÇ           0x00401867      53             push ebx
‚îÇ           0x00401868      56             push esi
‚îÇ           0x00401869      8b742470       mov esi, dword [arg_70h]
‚îÇ           0x0040186d      33db           xor ebx, ebx
‚îÇ           0x0040186f      57             push edi
‚îÇ           0x00401870      8b3d38204000   mov edi, dword [sym.imp.KERNEL32.dll_GetCurrentProcess] ; [0x402038:4]=0x23d6 reloc.KERNEL32.dll_GetCurrentProcess
‚îÇ           0x00401876      53             push ebx                    ; DWORD dwOptions
‚îÇ           0x00401877      6a01           push 1                      ; 1 ; BOOL bInheritHandle
‚îÇ           0x00401879      8d4c2470       lea ecx, [var_70h]
‚îÇ           0x0040187d      6a02           push 2                      ; 2 ; DWORD dwDesiredAccess
‚îÇ           0x0040187f      51             push ecx                    ; LPHANDLE lpTargetHandle
‚îÇ           0x00401880      c744243844..   mov dword [var_38h], 0x44   ; 'D'
‚îÇ                                                                      ; [0x44:4]=-1 ; 68
‚îÇ           0x00401888      895c243c       mov dword [var_3ch], ebx
‚îÇ           0x0040188c      895c2444       mov dword [var_44h], ebx
‚îÇ           0x00401890      895c2440       mov dword [var_40h], ebx
‚îÇ           0x00401894      895c2454       mov dword [var_54h], ebx
‚îÇ           0x00401898      895c2450       mov dword [var_50h], ebx
‚îÇ           0x0040189c      895c244c       mov dword [var_4ch], ebx
‚îÇ           0x004018a0      895c2448       mov dword [var_48h], ebx
‚îÇ           0x004018a4      66895c2468     mov word [var_68h], bx
‚îÇ           0x004018a9      895c246c       mov dword [var_6ch], ebx
‚îÇ           0x004018ad      66895c246a     mov word [var_6ah], bx
‚îÇ           0x004018b2      c744246401..   mov dword [var_64h], 0x101  ; [0x101:4]=-1 ; 257
‚îÇ           0x004018ba      89442470       mov dword [var_70h_2], eax
‚îÇ           0x004018be      89742474       mov dword [var_74h], esi
‚îÇ           0x004018c2      89742478       mov dword [var_70h], esi
‚îÇ           0x004018c6      ffd7           call edi
‚îÇ           0x004018c8      50             push eax                    ; HANDLE hTargetProcessHandle
‚îÇ           0x004018c9      56             push esi                    ; HANDLE hSourceHandle
‚îÇ           0x004018ca      ffd7           call edi
‚îÇ           0x004018cc      50             push eax                    ; HANDLE hSourceProcessHandle
‚îÇ           0x004018cd      ff1534204000   call dword [sym.imp.KERNEL32.dll_DuplicateHandle] ; 0x402034 ; BOOL DuplicateHandle(HANDLE hSourceProcessHandle, HANDLE hSourceHandle, HANDLE hTargetProcessHandle, LPHANDLE lpTargetHandle, DWORD dwDesiredAccess, BOOL bInheritHandle, DWORD dwOptions)
‚îÇ           0x004018d3      bf68304000     mov edi, str.cmd.exe        ; 0x403068 ; "cmd.exe"
‚îÇ           0x004018d8      83c9ff         or ecx, 0xffffffff          ; -1
‚îÇ           0x004018db      33c0           xor eax, eax
‚îÇ           0x004018dd      8d54240c       lea edx, [var_ch]
‚îÇ           0x004018e1      f2ae           repne scasb al, byte es:[edi]
‚îÇ           0x004018e3      f7d1           not ecx
‚îÇ           0x004018e5      2bf9           sub edi, ecx
‚îÇ           0x004018e7      8bc1           mov eax, ecx
‚îÇ           0x004018e9      8bf7           mov esi, edi
‚îÇ           0x004018eb      8bfa           mov edi, edx
‚îÇ           0x004018ed      8d542428       lea edx, [var_28h]
‚îÇ           0x004018f1      c1e902         shr ecx, 2
‚îÇ           0x004018f4      f3a5           rep movsd dword es:[edi], dword [esi]
‚îÇ           0x004018f6      8bc8           mov ecx, eax
‚îÇ           0x004018f8      8d44240c       lea eax, [var_ch]
‚îÇ           0x004018fc      83e103         and ecx, 3
‚îÇ           0x004018ff      f3a4           rep movsb byte es:[edi], byte [esi]
‚îÇ           0x00401901      8d4c2418       lea ecx, [var_18h]
‚îÇ           0x00401905      51             push ecx
‚îÇ           0x00401906      52             push edx
‚îÇ           0x00401907      53             push ebx
‚îÇ           0x00401908      53             push ebx
‚îÇ           0x00401909      53             push ebx
‚îÇ           0x0040190a      6a01           push 1                      ; 1
‚îÇ           0x0040190c      53             push ebx
‚îÇ           0x0040190d      53             push ebx                    ; LPSECURITY_ATTRIBUTES lpProcessAttributes
‚îÇ           0x0040190e      50             push eax                    ; LPSTR lpCommandLine
‚îÇ           0x0040190f      53             push ebx                    ; LPCSTR lpApplicationName
‚îÇ           0x00401910      ff1530204000   call dword [sym.imp.KERNEL32.dll_CreateProcessA] ; 0x402030 ; BOOL CreateProcessA(LPCSTR lpApplicationName, LPSTR lpCommandLine, LPSECURITY_ATTRIBUTES lpProcessAttributes, LPSECURITY_ATTRIBUTES lpThreadAttributes, BOOL bInheritHandles, DWORD dwCreationFlags, LPVOID lpEnvironment, LPCSTR lpCurrentDirectory, LPSTARTUPINFOA lpStartupInfo, LPPROCESS_INFORMATION lpProcessInformation)
‚îÇ           0x00401916      85c0           test eax, eax




‚úÖ Conclusi√≥n: el binario est√° duplicando un handle de un proceso hijo (cmd.exe) y usando ese handle para leer datos.
üß† ¬øQu√© est√° haciendo el c√≥digo?
Paso a paso:

    Recibe dos argumentos:

mov eax, dword [arg_64h]   ; primero
mov esi, dword [arg_70h]   ; segundo

Luego realiza una llamada a:

DuplicateHandle(
  GetCurrentProcess(),    // source process
  esi,                    // source handle
  GetCurrentProcess(),    // target process
  &lpTargetHandle,        // out: duplicated handle
  ...
);

Esta llamada clona un handle (esi), que le fue pasado como argumento (posiblemente un pipe, archivo o stdin de otro proceso).

Posteriormente:

mov [var_70h], esi
...
call ReadFile

El handle duplicado (guardado en [ebp] m√°s adelante) es el que se usa en ReadFile.

Tambi√©n lanza cmd.exe con CreateProcessA:

    mov edi, str.cmd.exe ; 0x403068 ; "cmd.exe"
    ...
    call sym.imp.KERNEL32.dll_CreateProcessA

    Esto probablemente se hace con herencia de handles activada (bInheritHandles = 1) para redirigir entrada/salida.

üí° ¬øQu√© archivo est√° leyendo realmente?

No est√° leyendo un archivo del sistema de ficheros. Est√° leyendo la salida est√°ndar (stdout) o entrada est√°ndar (stdin) del proceso cmd.exe.

Esto es t√≠pico de malware o droppers que lanzan procesos (cmd, powershell, etc.) y capturan su salida para:

    Ejecutar comandos arbitrarios.

    Capturar la respuesta.

    Enviar esa respuesta a un C2 (send se usa despu√©s de ReadFile en tu c√≥digo).

‚úÖ En resumen

üîé ReadFile est√° leyendo desde un handle duplicado pasado como argumento, que apunta a cmd.exe.

üì¶ No hay acceso a un archivo real en el disco. El "archivo" es en realidad un stream desde un proceso hijo.



üîÑ FLUJO GENERAL: LECTURA DESDE CMD.EXE
```
         ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
         ‚îÇ  [Inicio de funci√≥n 0x401860]‚îÇ
         ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
                      ‚îÇ
                      ‚ñº
        ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
        ‚îÇ Recibe 2 argumentos:        ‚îÇ
        ‚îÇ  arg_64h ‚Üí usado como cmd   ‚îÇ
        ‚îÇ  arg_70h ‚Üí handle a duplicar‚îÇ
        ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
                     ‚îÇ
                     ‚ñº
        ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
        ‚îÇ Llama a GetCurrentProcess() ‚îÇ
        ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
                     ‚îÇ
                     ‚ñº
        ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
        ‚îÇ Llama a DuplicateHandle     ‚îÇ
        ‚îÇ duplica el handle recibido  ‚îÇ
        ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
                     ‚îÇ
                     ‚ñº
        ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
        ‚îÇ Crea proceso hijo "cmd.exe" ‚îÇ
        ‚îÇ con CreateProcessA          ‚îÇ
        ‚îÇ y hereda handles            ‚îÇ
        ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
                     ‚îÇ
                     ‚ñº
        ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
        ‚îÇ Usa ReadFile con el handle  ‚îÇ‚óÑ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
        ‚îÇ duplicado para leer datos   ‚îÇ     ‚îÇ
        ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò     ‚îÇ
                     ‚îÇ                      ‚îÇ
                     ‚ñº                      ‚îÇ
        ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê     ‚îÇ
        ‚îÇ Env√≠a datos con send()      ‚îÇ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
        ‚îÇ (posible C2 o exfiltraci√≥n) ‚îÇ
        ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò

```

üß† Interpretaci√≥n t√©cnica

    arg_70h es el handle de algo como un pipe o stdin de cmd.exe.

    Se clona ese handle con DuplicateHandle, lo que le permite usarlo localmente.

    Luego llama a ReadFile, que act√∫a sobre ese handle (leyendo la salida de cmd.exe).

    Posteriormente, lo que lee lo env√≠a con send() ‚Äî esto sugiere una conexi√≥n de red activa, como parte de un C2 (Command and Control).
