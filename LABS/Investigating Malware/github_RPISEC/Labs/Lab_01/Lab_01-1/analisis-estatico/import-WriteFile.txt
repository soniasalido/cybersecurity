[0x00401a1d]> ii~WriteFile
19  0x00402048 NONE FUNC KERNEL32.dll WriteFile
[0x00401a1d]> axt 0x00402048
(nofunc) 0x401ab1 [ICOD:r--] mov edi, dword [sym.imp.KERNEL32.dll_WriteFile]
[0x00401a1d]> s 0x401ab1
[0x00401ab1]> pd20
            0x00401ab1      8b3d48204000   mov edi, dword [sym.imp.KERNEL32.dll_WriteFile] ; [0x402048:4]=0x2412 reloc.KERNEL32.dll_WriteFile
            ; CODE XREF from fcn.00401860 @ +0x2bf(x)
            0x00401ab7      8d542410       lea edx, [esp + 0x10]
            0x00401abb      6814304000     push 0x403014               ; '\x140@'
            0x00401ac0      52             push edx
            0x00401ac1      e8faf5ffff     call fcn.004010c0
            0x00401ac6      8d442424       lea eax, [esp + 0x24]
            0x00401aca      56             push esi
            0x00401acb      8d4c241c       lea ecx, [esp + 0x1c]
            0x00401acf      50             push eax
            0x00401ad0      51             push ecx
            0x00401ad1      e84af7ffff     call fcn.00401220
            0x00401ad6      6a06           push 6                      ; 6
            0x00401ad8      8d542434       lea edx, [esp + 0x34]
            0x00401adc      6870304000     push str.exit_r_n           ; 0x403070 ; "exit\r\n"
            0x00401ae1      52             push edx
            0x00401ae2      e8cf010000     call sub.MSVCRT.dll__strnicmp
            0x00401ae7      83c420         add esp, 0x20
            0x00401aea      85c0           test eax, eax
        ┌─< 0x00401aec      7444           je 0x401b32
        │   0x00401aee      8b5304         mov edx, dword [ebx + 4]
[0x00401ab1]>



-----------------------
[0x00401ab1]> ps @ 0x403014

[0x00401ab1]> iz~403014
[0x00401ab1]> px 32 @ 0x403014
- offset -  1415 1617 1819 1A1B 1C1D 1E1F 2021 2223  456789ABCDEF0123
0x00403014  113a 6dd2 27e9 b931 6874 7470 3a2f 2f77  .:m.'..1http://w
0x00403024  7777 2e75 656f 7065 6e2e 636f 6d2f 7465  ww.ueopen.com/te
[0x00401ab1]> axt 0x403014
(nofunc) 0x4019b9 [DATA:r--] push 0x403014
(nofunc) 0x401abb [DATA:r--] push 0x403014
[0x00401ab1]>


🧠 Análisis de la dirección 0x403014
🔍 Contenido en memoria:

0x403014 → http://www.ueopen.com/te...

Este es un URL en claro, codificado directamente en el binario.
🧩 ¿Para qué se usa?

En el código:

0x00401abb      6814304000     push 0x403014
0x00401ac0      52             push edx
0x00401ac1      e8faf5ffff     call fcn.004010c0

La cadena se pasa como argumento a una función en fcn.004010c0. Este patrón suele indicar una función de:

    descarga remota

    petición HTTP

    o incluso ejecución de comandos a través de URL.

🚨 Indicadores de comportamiento malicioso

    El uso de una URL codificada dentro del binario es un Indicador de Compromiso (IOC) típico de malware.

    El dominio ueopen[.]com puede ser un C2 (Command & Control).

    Al combinarlo con lo anterior (uso de send, recv, ShellExecuteExA, WriteFile), encaja con un patrón de malware tipo RAT, dropper o stealer.

---------------------------------------

Analizar ahora la función fcn.004010c0, que recibe la URL. Para ver cómo gestiona la URL:
[0x00401ab1]> s fcn.004010c0
[0x004010c0]> pd 50
            ; CALL XREFS from fcn.00401860 @ +0x16d(x), +0x261(x)
┌ 104: fcn.004010c0 (int32_t arg_ch, int32_t arg_8h);
│ `- args(sp[0x4..0x8])
│           0x004010c0      8b442408       mov eax, dword [arg_8h]
│           0x004010c4      53             push ebx
│           0x004010c5      56             push esi
│           0x004010c6      0fbe10         movsx edx, byte [eax]
│           0x004010c9      0fbe4801       movsx ecx, byte [eax + 1]
│           0x004010cd      c1e208         shl edx, 8
│           0x004010d0      0bd1           or edx, ecx
│           0x004010d2      8a4802         mov cl, byte [eax + 2]
│           0x004010d5      c0f905         sar cl, 5
│           0x004010d8      0fbec9         movsx ecx, cl
│           0x004010db      c1e203         shl edx, 3
│           0x004010de      0bd1           or edx, ecx
│           0x004010e0      8b4c240c       mov ecx, dword [arg_ch]
│           0x004010e4      8911           mov dword [ecx], edx
│           0x004010e6      8a5805         mov bl, byte [eax + 5]
│           0x004010e9      0fbe5002       movsx edx, byte [eax + 2]
│           0x004010ed      0fbe7003       movsx esi, byte [eax + 3]
│           0x004010f1      c1e206         shl edx, 6
│           0x004010f4      0bd6           or edx, esi
│           0x004010f6      0fbe7004       movsx esi, byte [eax + 4]
│           0x004010fa      c1e208         shl edx, 8
│           0x004010fd      c0fb07         sar bl, 7
│           0x00401100      0bd6           or edx, esi
│           0x00401102      0fbef3         movsx esi, bl
│           0x00401105      d1e2           shl edx, 1
│           0x00401107      0bd6           or edx, esi
│           0x00401109      895104         mov dword [ecx + 4], edx
│           0x0040110c      0fbe5005       movsx edx, byte [eax + 5]
│           0x00401110      0fbe7006       movsx esi, byte [eax + 6]
│           0x00401114      0fbe4007       movsx eax, byte [eax + 7]
│           0x00401118      c1e209         shl edx, 9
│           0x0040111b      0bd6           or edx, esi
│           0x0040111d      5e             pop esi
│           0x0040111e      c1e208         shl edx, 8
│           0x00401121      0bd0           or edx, eax
│           0x00401123      5b             pop ebx
│           0x00401124      895108         mov dword [ecx + 8], edx
└           0x00401127      c3             ret
            0x00401128      90             nop
            0x00401129      90             nop
            0x0040112a      90             nop
            0x0040112b      90             nop
            0x0040112c      90             nop
            0x0040112d      90             nop
            0x0040112e      90             nop
            0x0040112f      90             nop
            ; CALL XREF from fcn.004011e0 @ 0x4011f9(x)
┌ 81: fcn.00401130 (int32_t arg_8h);
│ `- args(sp[0x4..0x4])
│           0x00401130      56             push esi
│           0x00401131      8b742408       mov esi, dword [arg_8h]
│           0x00401135      57             push edi
│           0x00401136      8b4608         mov eax, dword [esi + 8]
[0x004010c0]>

