import os
import math
import re
from collections import Counter

def calcular_entropia(data):
    if not data:
        return 0
    counter = Counter(data)
    total = len(data)
    return -sum((count / total) * math.log2(count / total) for count in counter.values())

def extraer_strings(data, min_len=4):
    resultado = []
    actual = b""
    for byte in data:
        if 32 <= byte <= 126:
            actual += bytes([byte])
        else:
            if len(actual) >= min_len:
                resultado.append(actual.decode(errors="ignore"))
            actual = b""
    if len(actual) >= min_len:
        resultado.append(actual.decode(errors="ignore"))
    return resultado

def posibles_direcciones(strings):
    dominios = []
    ips = []
    for s in strings:
        if re.search(r"\b(?:[a-z0-9-]+\.)+[a-z]{2,6}\b", s):
            dominios.append(s)
        if re.search(r"\b\d{1,3}(?:\.\d{1,3}){3}\b", s):
            ips.append(s)
    return dominios, ips

def contiene_base64(s):
    return bool(re.fullmatch(r'[A-Za-z0-9+/=]{8,}', s))

def contiene_hex(s):
    return bool(re.fullmatch(r'(0x)?[A-Fa-f0-9]{8,}', s))

def main():
    ruta = "overlay.bin"
    if not os.path.exists(ruta):
        print(f"[!] Archivo '{ruta}' no encontrado.")
        return

    with open(ruta, "rb") as f:
        data = f.read()

    print(f"[+] Tamaño del overlay: {len(data)} bytes")

    entropia = calcular_entropia(data)
    print(f"[+] Entropía: {entropia:.4f} {'(ALTA - posible cifrado/comprimido)' if entropia > 7 else '(BAJA - puede haber texto plano)'}")

    strings = extraer_strings(data)
    print(f"[+] Cadenas legibles encontradas: {len(strings)}")
    for s in strings:
        print(f"    - {s}")

    dominios, ips = posibles_direcciones(strings)
    if dominios or ips:
        print(f"[+] Posibles dominios C2 detectados: {dominios}")
        print(f"[+] Posibles direcciones IP detectadas: {ips}")

    codificadas = [s for s in strings if contiene_base64(s) or contiene_hex(s)]
    if codificadas:
        print(f"[+] Posibles cadenas codificadas encontradas:")
        for s in codificadas:
            print(f"    - {s}")

if __name__ == "__main__":
    main()
