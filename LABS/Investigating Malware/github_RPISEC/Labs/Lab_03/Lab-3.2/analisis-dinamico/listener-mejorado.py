#!/usr/bin/env python3
import socket, binascii, datetime, struct

HOST = ''            # 0.0.0.0
PORT = 443
RECV_SZ = 65535
TIMEOUT_S = 120

MAGIC_PARAM_REQ = b'v\x16od\x11og\x0fofv'   # cabecera que vemos antes de los 0x55

def hexdump(b: bytes) -> str:
    hx = binascii.hexlify(b).decode()
    return ' '.join(hx[i:i+2] for i in range(0, len(hx), 2))

def make_handshake_reply() -> bytes:
    return b"fxftest\x00"  # 8 bytes; compara sÃ³lo 7

def make_command_packet(opcode: int) -> bytes:
    # 0x104 bytes: [DWORD opcode LE] + relleno cero
    pkt = struct.pack("<I", opcode)
    return pkt + b"\x00" * (0x104 - len(pkt))

def looks_like_param_block(b: bytes) -> bool:
    # exfil de FUN_004018C0: 256 bytes
    if len(b) == 256 and (b.startswith(MAGIC_PARAM_REQ) or b.count(0x55) > 100):
        return True
    return False

def handle_client(c: socket.socket, addr):
    ts = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    print(f'\n[+] {ts} Connection from {addr[0]}:{addr[1]}')
    state = "WAIT_HELLO"   # -> WAIT_SYSINFO -> ACTIVE
    try:
        c.settimeout(TIMEOUT_S)
        while True:
            try:
                data = c.recv(RECV_SZ)
            except socket.timeout:
                print('    [*] idle timeout; keeping connection open...')
                continue

            if not data:
                print('    [*] Client closed connection.')
                break

            print(f'    [*] Received ({len(data)} bytes):')
            print(f'        ASCII: {data!r}')
            print(f'        HEX  : {hexdump(data)}')

            # 1) HELLO
            if state == "WAIT_HELLO" and b'fxftest' in data:
                resp = make_handshake_reply()
                c.sendall(resp)
                print(f'    [*] Sent handshake ({len(resp)} bytes)')
                state = "WAIT_SYSINFO"
                continue

            # 2) SYSINFO (512 bytes)
            if state == "WAIT_SYSINFO":
                if len(data) >= 512:
                    cmd = make_command_packet(1)   # opcode 1
                    c.sendall(cmd)
                    print(f'    [*] Sent command ({len(cmd)} bytes), opcode=1')
                    state = "ACTIVE"
                continue

            # 3) ACTIVE: esperar exfil y mandar opcode 2
            if state == "ACTIVE":
                if looks_like_param_block(data):
                    print("    [*] Looks like exfil param block (256 bytes). Sending opcode 2...")
                    cmd2 = make_command_packet(2)
                    c.sendall(cmd2)
                    print(f'    [*] Sent command ({len(cmd2)} bytes), opcode=2')
                    # Puedes mantenerte en ACTIVE para seguir jugando
                    continue

    except Exception as e:
        print(f'    [!] Error: {e}')
    finally:
        try:
            c.shutdown(socket.SHUT_RDWR)
        except Exception:
            pass
        c.close()
        print('    [*] Connection closed.')

def main():
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    s.bind((HOST, PORT))
    s.listen(5)
    print(f'[*] Listening on 0.0.0.0:{PORT}')
    try:
        while True:
            c, addr = s.accept()
            handle_client(c, addr)
    except KeyboardInterrupt:
        print('\n[!] Interrupted, shutting down.')
    finally:
        s.close()

if __name__ == "__main__":
    main()
