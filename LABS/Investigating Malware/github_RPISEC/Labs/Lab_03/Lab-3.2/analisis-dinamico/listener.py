#!/usr/bin/env python3
import socket, binascii, datetime

HOST = ''          # 0.0.0.0
PORT = 443         # puerto de escucha
RECV_SZ = 65535    # tamaño máximo a recibir
KEEP_ALIVE = False # True = mantén la conexión abierta tras responder

# Respuesta por defecto (si no se dispara ninguna regla)
DEFAULT_RESPONSE = b'12345678'  # 8 bytes

def hexdump(b: bytes) -> str:
    hx = binascii.hexlify(b).decode()
    grouped = ' '.join(hx[i:i+2] for i in range(0, len(hx), 2))
    return grouped

def rule_engine(data: bytes) -> bytes:
    # Reglas sencillas; añade las que necesites
    if b'fxftest' in data:
        return b'12345678'      # lo que el binario espera en este lab
    # ejemplo: si empieza por GET HTTP, contesta 200 OK mínimo
    if data.startswith(b'GET ') or data.startswith(b'POST '):
        body = b'OK'
        headers = (
            b'HTTP/1.1 200 OK\r\n'
            b'Content-Type: text/plain\r\n'
            b'Content-Length: ' + str(len(body)).encode() + b'\r\n'
            b'Connection: close\r\n\r\n'
        )
        return headers + body
    return DEFAULT_RESPONSE

def main():
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    s.bind((HOST, PORT))
    s.listen(5)
    print(f'[*] Listening on 0.0.0.0:{PORT}')
    while True:
        c, addr = s.accept()
        ts = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        print(f'\n[+] {ts} Connection from {addr[0]}:{addr[1]}')
        try:
            c.settimeout(10.0)
            data = c.recv(RECV_SZ)
            print(f'    [*] Received ({len(data)} bytes):')
            print(f'        ASCII: {data!r}')
            print(f'        HEX  : {hexdump(data)}')

            resp = rule_engine(data)
            if resp:
                c.sendall(resp)
                print(f'    [*] Sent   ({len(resp)} bytes): {resp!r}')
            else:
                print('    [*] No response (rule_engine returned empty).')

            if not KEEP_ALIVE:
                c.shutdown(socket.SHUT_RDWR)
                c.close()
        except Exception as e:
            print(f'    [!] Error: {e}')
            try:
                c.close()
            except:
                pass

if __name__ == "__main__":
    main()
