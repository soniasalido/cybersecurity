#!/usr/bin/env python3
import socket, binascii, datetime, struct, time

HOST = ''      # 0.0.0.0
PORT = 4441
RECV_SZ = 65535
TIMEOUT_S = 120

MAGIC_PARAM_REQ = b'v\x16od\x11og\x0fofv'  # heurística 256B post-op1

def hexdump(b: bytes) -> str:
    hx = binascii.hexlify(b).decode()
    return ' '.join(hx[i:i+2] for i in range(0, len(hx), 2))

def safe_ascii(b: bytes) -> bytes:
    return bytes(ch if 32 <= ch < 127 else 0x2E for ch in b)

def make_handshake_reply() -> bytes:
    return b"fxftest\x00"

def make_command_packet_no_param(opcode: int) -> bytes:
    pkt = struct.pack("<I", opcode)
    return pkt + b"\x00" * (0x104 - len(pkt))

def looks_like_param_block(b: bytes) -> bool:
    if len(b) == 256 and (b.startswith(MAGIC_PARAM_REQ) or b.count(0x55) > 100):
        return True
    return False

def handle_client(c: socket.socket, addr):
    ts = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    print(f'\n[+] {ts} Conexión de {addr[0]}:{addr[1]}')
    state = "WAIT_HELLO"
    try:
        c.settimeout(TIMEOUT_S)
        while True:
            data = c.recv(RECV_SZ)
            if not data:
                print('    [*] Client closed connection.')
                break
            print(f'    [*] Recibido ({len(data)} bytes):')
            print(f'        ASCII: {safe_ascii(data)!r}')
            print(f'        HEX  : {hexdump(data)}')

            if state == "WAIT_HELLO" and b'fxftest' in data:
                c.sendall(make_handshake_reply())
                print('    [*] Enviado handshake')
                state = "WAIT_SYSINFO"
                continue

            if state == "WAIT_SYSINFO":
                if len(data) >= 512:
                    print("    [*] Enviando opcode 1…")
                    pkt = make_command_packet_no_param(1)
                    c.sendall(pkt)
                    print(f'    [+] opcode=1 enviado ({len(pkt)} bytes)')
                    state = "WAIT_256_EXFIL"
                continue

            if state == "WAIT_256_EXFIL":
                if looks_like_param_block(data):
                    print("    [+] Bloque de 256B recibido post-op1 (posible plantilla/parámetros).")
                    print(f'        HEX(256): {hexdump(data)}')
                    print('    [*] Prueba de opcode 1 completada. No se envía opcode 2 en este listener.')
                    break
                else:
                    print('    [*] No parece el bloque de 256B esperado (seguimos esperando)…')
                    continue

    except Exception as e:
        print(f'    [!] Error: {e}')
    finally:
        try:
            c.shutdown(socket.SHUT_RDWR)
        except Exception:
            pass
        c.close()
        print('    [*] Conexión cerrada.')

def main():
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    s.bind((HOST, PORT))
    s.listen(5)
    print(f'[*] Listener OPCODE-1 en 0.0.0.0:{PORT}')
    try:
        while True:
            c, addr = s.accept()
            handle_client(c, addr)
    except KeyboardInterrupt:
        print('\n[!] Interrumpido.')
    finally:
        s.close()

if __name__ == "__main__":
    main()
