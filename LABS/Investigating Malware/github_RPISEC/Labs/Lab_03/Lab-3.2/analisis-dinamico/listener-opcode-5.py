#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import socket, struct, binascii, datetime, os

HOST = ''          # 0.0.0.0
PORT = 443
RECV_SZ = 65535
TIMEOUT_S = 60

PATH_TO_DELETE = r"C:\Users\usuario\Desktop\prueba.txt"

def hexdump(b: bytes) -> str:
    hx = binascii.hexlify(b).decode()
    return ' '.join(hx[i:i+2] for i in range(0, len(hx), 2))

def safe_ascii(b: bytes) -> bytes:
    return bytes(ch if 32 <= ch < 127 else 0x2E for ch in b)

def make_handshake_reply() -> bytes:
    return b"fxftest\x00"

def make_opcode4_packet(path_clear: str) -> bytes:
    p = path_clear.encode('ascii', errors='ignore') + b"\x00"
    if len(p) > 256:
        p = p[:256]
        if p[-1] != 0:
            p = p[:-1] + b"\x00"
    else:
        p = p + b"\x00" * (256 - len(p))
    p_xor = bytes([b ^ 0x55 for b in p])
    pkt = struct.pack("<I", 4) + p_xor
    assert len(pkt) == 0x104
    return pkt

def xor55(data: bytes) -> bytes:
    return bytes([b ^ 0x55 for b in data])

def run_server():
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    s.bind((HOST, PORT))
    s.listen(5)
    print(f"[*] Escuchando en 0.0.0.0:{PORT}")

    while True:
        c, addr = s.accept()
        ts = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        print(f"\n[+] {ts} Conexión de {addr[0]}:{addr[1]}")
        c.settimeout(TIMEOUT_S)
        try:
            # 1) HELLO
            data = c.recv(RECV_SZ)
            print(f"[RX {len(data)} B] ASCII={safe_ascii(data)!r}\nHEX = {hexdump(data)}")
            if b"fxftest" not in data:
                print("[!] No llegó el hello esperado.")
                c.close()
                continue
            c.sendall(make_handshake_reply())
            print("[TX handshake 8 B]")

            # 2) SYSINFO (512B)
            data = c.recv(RECV_SZ)
            print(f"[RX {len(data)} B] ASCII={safe_ascii(data)!r}\nHEX = {hexdump(data)}")
            

            # --- NUEVO: enviar opcode 5 y datos ofuscados (0x204 bytes) según FUN_004020f0 ---
            opcode5 = struct.pack("<I", 5)
            c.sendall(opcode5)
            print("[TX opcode 5 (DWORD 4 bytes)]")

            DATA_SIZE = 0x204
            fake_data = os.urandom(DATA_SIZE)
            obf_data = xor55(fake_data)

            c.sendall(obf_data)
            print(f"[TX {DATA_SIZE} bytes datos ofuscados XOR 0x55]")
            # --- FIN Nuevo ---

        except socket.timeout:
            print("[!] Timeout de socket.")
        except Exception as e:
            print(f"[!] Error: {e}")
        finally:
            try:
                c.shutdown(socket.SHUT_RDWR)
            except Exception:
                pass
            c.close()
            print("[*] Conexión cerrada.")

if __name__ == "__main__":
    run_server()
